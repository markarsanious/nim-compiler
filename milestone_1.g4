grammar milestone_1.g4;

start:  (expr NEWLINE)* ;

expr:   "all the definititions ORed together";

NEWLINE : [\r\n]+ ;
IDENTIFIER : LETTER+ ('_'(LETTER | DIGIT))*;
COMMA : ',' ;
DIGIT : [0-9] ;
LETTER : [a-z] | [A-Z];

AND : 'and';
VARIABLE : 'var';
OR : 'or';
NOT : 'not';
DIV : 'div';
NOT : 'not';
SHL : 'shl';
SHR : 'shr';
XOR : 'xor';
MOD : 'mod' | '%';
IS : 'is';
ISNOT : 'isnot';
OF : 'of';
EQUALS_OPERATOR : '=';
ADD_OPERATOR : '+';
MUL_OPERATOR : '*';
MINUS_OPERATOR : '-';
DIV_OPERATOR : '/';
BITWISE_NOT_OPERATOR : '~';
AND_OPERATOR : '&';
OR_OPERATOR : '|';
LESS_THAN : '<';
GREATER_THAN : '>';
NOT_OPERATOR : '!';
XOR_OPERATOR : '^';
DOT : '.';
COLON : ':';
COMMA : ',';
SEMI_COLON : ';';







• ADDR
• AS
• ASM
• BIND
• BLOCK
• BREAK
• CASE
• CAST
• CONCEPT
• CONST
• CONTINUE
• CONVERTER
• DEFER
• DISCARD
• DISTINCT

• DO
• ELIF
• ELSE
• END
• ENUM
• EXCEPT
• EXPORT
• FINALLY
• FOR
• FROM
• FUNC
• IF
• IMPORT
• IN
• INCLUDE
• INTERFACE


• ITERATOR
• LET
• MACRO
• METHOD
• MIXIN
• NIL
• NOTIN
• OBJECT
• OUT
• PROC
• PTR
• RAISE
• REF
• RETURN
• STATIC
• TEMPLATE
• TRY
• TUPLE
• TYPE
• USING
• WHEN
• WHILE

• YIELD
• IDENTIFIER

• INT8_LIT
• INT16_LIT
• INT32_LIT
• INT64_LIT
• UINT_LIT
• UINT8_LIT
• UINT16_LIT
• UINT32_LIT
• UINT64_LIT
• FLOAT32_LIT
• FLOAT32_SUFFIX
• FLOAT64_LIT
• FLOAT64_SUFFIX
• FLOAT_LIT
• EXP
• INT_LIT
• HEX_LIT
• DEC_LIT
• OCT_LIT
• BIN_LIT
• HEXDIGIT
• OCTDIGIT
• BINDIGIT



• AT
• MODULUS


• OPEN_PAREN
• CLOSE_PAREN
• OPEN_BRACE
• CLOSE_BRACE
• OPEN_BRACK
• CLOSE_BRACK
• STR_LIT
• Character literals
• CHAR_LIT
• TRIPLESTR_LIT
• TRIPLESTR_ITEM
• RSTR_LIT
• GENERALIZED_STR_LIT
• GENERALIZED_TRIPLESTR_LIT