IDENTIFIER x
COMMA ,
IDENTIFIER y
COMMA ,
IDENTIFIER z
COLON :
IDENTIFIER int
IDENTIFIER x
INT_LIT 10
IDENTIFIER y
INT_LIT 25
IDENTIFIER z
IDENTIFIER x
IDENTIFIER y
IDENTIFIER echo
OPEN_PAREN (
STR_LIT "sum of ", x, " and ", y, " is "
COMMA ,
IDENTIFIER z
CLOSE_PAREN )
VARIABLE var
INDENT     
IDENTIFIER j
COMMA ,
IDENTIFIER k
COLON :
IDENTIFIER int
INDENT     
IDENTIFIER a
COMMA ,
IDENTIFIER b
COMMA ,
IDENTIFIER c
COLON :
IDENTIFIER string
IDENTIFIER j
INT_LIT 60
IDENTIFIER k
DIGIT 5
IDENTIFIER j
SEMI_COLON ;
IDENTIFIER a
STR_LIT " hello world "
IDENTIFIER b
STR_LIT "Bye world"
IDENTIFIER c
STR_LIT "Welcome"
IDENTIFIER echo
OPEN_PAREN (
IDENTIFIER j
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER k
CLOSE_PAREN )
IDENTIFIER echo
OPEN_PAREN (
IDENTIFIER a
COMMA ,
STR_LIT " : " , b, " : "
COMMA ,
IDENTIFIER c
CLOSE_PAREN )
CONST const
INDENT     
IDENTIFIER x1
DIGIT 1
INDENT     
IDENTIFIER y1
DIGIT 2
INDENT     
IDENTIFIER z1
IDENTIFIER y1
DIGIT 5
IDENTIFIER echo
OPEN_PAREN (
IDENTIFIER x1
COMMA ,
STR_LIT " : ", y1, " : "
COMMA ,
IDENTIFIER z1
CLOSE_PAREN )
LET let
IDENTIFIER x2
STR_LIT "abc"
IDENTIFIER echo
OPEN_PAREN (
IDENTIFIER x2
CLOSE_PAREN )
VARIABLE var
IDENTIFIER name
STR_LIT ""
IF if
IDENTIFIER name
STR_LIT ""
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Poor soul, you lost your name?"
ELIF elif
IDENTIFIER name
STR_LIT "name"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Very funny, your name is name."
ELSE else
COLON :
IDENTIFIER echo
STR_LIT "Hi, ", name, "!"
IDENTIFIER name
STR_LIT "potato"
CASE case
IDENTIFIER name
STR_LIT ""
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Poor soul, you lost your name?"
STR_LIT "name"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Very funny, your name is name."
STR_LIT "Dave", "Frank"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Cool name!"
ELSE else
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Hi, ", name, "!"
VARIABLE var
IDENTIFIER accm
STR_LIT ""
FOR for
IDENTIFIER letter
IN in
CHAR_LIT 'a'
CHAR_LIT 'z'
COLON :
INDENT     
IDENTIFIER accm
DOT .
IDENTIFIER add
OPEN_PAREN (
IDENTIFIER letter
CLOSE_PAREN )
IDENTIFIER echo
OPEN_PAREN (
IDENTIFIER accm
CLOSE_PAREN )
VARIABLE var
IDENTIFIER x3
DIGIT 1
WHILE while
IDENTIFIER x3
DIGIT 5
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "Counting : "
COMMA ,
IDENTIFIER x3
INDENT     
IDENTIFIER x3
IDENTIFIER x3
DIGIT 1
FOR for
IDENTIFIER i
IN in
DIGIT 1
DIGIT 5
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "i is "
COMMA ,
IDENTIFIER i
VARIABLE var
IDENTIFIER s
STR_LIT "some string"
FOR for
IDENTIFIER i
IN in
DIGIT 0
IDENTIFIER s
DOT .
IDENTIFIER len
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "char in s is "
COMMA ,
IDENTIFIER s
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
WHILE while
IDENTIFIER true
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "looping"
INDENT     
BREAK break
CONST const
IDENTIFIER system
STR_LIT "linux"
WHEN when
IDENTIFIER system
STR_LIT "windows"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "running on Windows!"
ELIF elif
IDENTIFIER system
STR_LIT "linux"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "running on Linux!"
ELIF elif
IDENTIFIER system
STR_LIT "macosx"
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "running on Mac OS X!"
ELSE else
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "unknown operating system"
INDENT     
INDENT     
VARIABLE var
IDENTIFIER x4
IDENTIFIER true
VARIABLE var
IDENTIFIER y4
IDENTIFIER true
IF if
IDENTIFIER x4
COLON :
IDENTIFIER x4
IDENTIFIER false
IF if
IDENTIFIER x4
COLON :
INDENT     
IF if
IDENTIFIER y4
COLON :
INDENT         
IDENTIFIER y4
IDENTIFIER false
INDENT     
ELSE else
COLON :
INDENT         
IDENTIFIER y4
IDENTIFIER true
INDENT         
IDENTIFIER echo
IDENTIFIER y4
IF if
IDENTIFIER x4
COLON :
INDENT     
IDENTIFIER x4
IDENTIFIER true
INDENT     
IDENTIFIER y4
IDENTIFIER true
INDENT     
INDENT     
IDENTIFIER echo
STR_LIT "x4 is ", x4, " y4 is "
COMMA ,
IDENTIFIER y4
PROC proc
IDENTIFIER yes
OPEN_PAREN (
IDENTIFIER question
COLON :
IDENTIFIER string
CLOSE_PAREN )
COLON :
IDENTIFIER bool
INDENT     
IDENTIFIER echo
IDENTIFIER question
COMMA ,
STR_LIT " (y/n)"
INDENT     
VARIABLE var
IDENTIFIER readline
STR_LIT "n"
INDENT     
WHILE while
IDENTIFIER true
COLON :
INDENT         
CASE case
IDENTIFIER readline
INDENT         
STR_LIT "y", "Y", "yes", "Yes"
COLON :
RETURN return
IDENTIFIER true
INDENT         
STR_LIT "n", "N", "no", "No"
COLON :
RETURN return
IDENTIFIER false
INDENT         
ELSE else
COLON :
IDENTIFIER echo
STR_LIT "Please be clear: yes or no"
IF if
IDENTIFIER yes
OPEN_PAREN (
STR_LIT "Should I delete all your important files?"
CLOSE_PAREN )
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "I'm sorry Dave, I'm afraid I can't do that."
ELSE else
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "I think you know what the problem is just as well as I do."
LET let
INDENT     
IDENTIFIER x5
DIGIT 0
INDENT     
IDENTIFIER y5
INT8_LIT 0'i8
INDENT     
IDENTIFIER z5
INT64_LIT 0'i64
INDENT     
IDENTIFIER u5
UINT_LIT 0'u
IDENTIFIER echo
STR_LIT "x5 is ", x5, " y5 is ", y5, " z5 is ", z5, " u5 is "
COMMA ,
IDENTIFIER u5
BLOCK block
IDENTIFIER outer
COLON :
INDENT     
FOR for
IDENTIFIER i
IN in
DIGIT 0
INT_LIT 2000
COLON :
INDENT         
FOR for
IDENTIFIER j
IN in
DIGIT 0
INT_LIT 2000
COLON :
INDENT             
IF if
IDENTIFIER i
IDENTIFIER j
INT_LIT 3145
COLON :
INDENT                 
IDENTIFIER echo
IDENTIFIER i
COMMA ,
STR_LIT ", "
COMMA ,
IDENTIFIER j
INDENT                 
BREAK break
IDENTIFIER outer
PROC proc
IDENTIFIER fibonacci
OPEN_PAREN (
IDENTIFIER n
COLON :
IDENTIFIER int
CLOSE_PAREN )
COLON :
IDENTIFIER int
INDENT     
IF if
IDENTIFIER n
DIGIT 2
COLON :
INDENT         
IDENTIFIER result
IDENTIFIER n
INDENT     
ELSE else
COLON :
INDENT         
IDENTIFIER result
IDENTIFIER fibonacci
OPEN_PAREN (
IDENTIFIER n
DIGIT 1
CLOSE_PAREN )
OPEN_PAREN (
IDENTIFIER n
DIGIT 2
CLOSE_PAREN )
DOT .
IDENTIFIER fibonacci
IDENTIFIER echo
IDENTIFIER fibonacci
OPEN_PAREN (
INT_LIT 10
CLOSE_PAREN )
TYPE type
INDENT     
IDENTIFIER IntArray
IDENTIFIER array
OPEN_BRACK [
DIGIT 0
DIGIT 5
COMMA ,
IDENTIFIER int
CLOSE_BRACK ]
INDENT     
IDENTIFIER QuickArray
IDENTIFIER array
OPEN_BRACK [
DIGIT 6
COMMA ,
IDENTIFIER int
CLOSE_BRACK ]
VARIABLE var
INDENT     
IDENTIFIER x6
COLON :
IDENTIFIER IntArray
INDENT     
IDENTIFIER y6
COLON :
IDENTIFIER QuickArray
IDENTIFIER x6
OPEN_BRACK [
DIGIT 1
COMMA ,
DIGIT 2
COMMA ,
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
COMMA ,
DIGIT 6
CLOSE_BRACK ]
IDENTIFIER y6
IDENTIFIER x6
FOR for
IDENTIFIER i
IN in
DIGIT 0
DIGIT 5
COLON :
INDENT     
IDENTIFIER echo
IDENTIFIER x6
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
COMMA ,
IDENTIFIER y6
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
INDENT     
FOR for
IDENTIFIER value
IN in
AT @
OPEN_BRACK [
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
CLOSE_BRACK ]
COLON :
INDENT     
IDENTIFIER echo
IDENTIFIER value
FOR for
IDENTIFIER i
COMMA ,
IDENTIFIER value
IN in
AT @
OPEN_BRACK [
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
CLOSE_BRACK ]
COLON :
INDENT     
IDENTIFIER echo
STR_LIT "index: ", $i, ", value:"
COMMA ,
IDENTIFIER $value
INDENT     
INDENT     
INDENT     
PROC proc
IDENTIFIER echoItem
OPEN_PAREN (
IDENTIFIER x
COLON :
IDENTIFIER string
CLOSE_PAREN )
IDENTIFIER echo
IDENTIFIER x
PROC proc
IDENTIFIER forEach
OPEN_PAREN (
IDENTIFIER action
COLON :
PROC proc
OPEN_PAREN (
IDENTIFIER x
COLON :
IDENTIFIER string
CLOSE_PAREN )
CLOSE_PAREN )
INDENT     
CONST const
INDENT         
IDENTIFIER data
OPEN_BRACK [
STR_LIT "hi", "bye", "later", "not today", "leave[]"
CLOSE_BRACK ]
INDENT     
FOR for
IDENTIFIER d
IN in
IDENTIFIER items
OPEN_PAREN (
IDENTIFIER data
CLOSE_PAREN )
COLON :
INDENT         
IDENTIFIER action
OPEN_PAREN (
IDENTIFIER d
CLOSE_PAREN )
IDENTIFIER forEach
OPEN_PAREN (
IDENTIFIER echoItem
CLOSE_PAREN )
INDENT     
INDENT     
INDENT     
INDENT     
INDENT     
